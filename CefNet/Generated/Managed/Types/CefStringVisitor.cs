// --------------------------------------------------------------------------------------------
// Copyright (c) 2019 The CefNet Authors. All rights reserved.
// Licensed under the MIT license.
// See the licence file in the project root for full license information.
// --------------------------------------------------------------------------------------------
// Generated by CefGen
// Source: Generated/Native/Types/cef_string_visitor_t.cs
// --------------------------------------------------------------------------------------------﻿
// DO NOT MODIFY! THIS IS AUTOGENERATED FILE!
// --------------------------------------------------------------------------------------------

#pragma warning disable 0169, 1591, 1573

using System;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;
using CefNet.CApi;
using CefNet.Internal;

namespace CefNet
{
	/// <summary>
	///  Implement this structure to receive string values asynchronously.
	/// </summary>
	/// <remarks>
	///  Role: Handler
	/// </remarks>
	public unsafe class CefStringVisitor : CefBaseRefCounted<cef_string_visitor_t>, ICefStringVisitorPrivate
	{
		private static readonly VisitDelegate fnVisit = VisitImpl;

		public CefStringVisitor()
		{
			var self = NativeInstance;
			self->visit = (void*) Marshal.GetFunctionPointerForDelegate(fnVisit);
		}

		public CefStringVisitor(cef_string_visitor_t* instance)
			: base((cef_base_ref_counted_t*) instance)
		{
		}

		[MethodImpl(MethodImplOptions.ForwardRef)]
		extern bool ICefStringVisitorPrivate.AvoidVisit();

		internal static CefStringVisitor Create(IntPtr instance)
		{
			return new CefStringVisitor((cef_string_visitor_t*) instance);
		}

		/// <summary>
		///  Method that will be executed.
		/// </summary>
		protected internal virtual void Visit(string @string)
		{
		}

		// void (*)(_cef_string_visitor_t* self, const cef_string_t* string)*
		private static void VisitImpl(cef_string_visitor_t* self, cef_string_t* @string)
		{
			var instance = GetInstance((IntPtr) self) as CefStringVisitor;
			if (instance == null || ((ICefStringVisitorPrivate) instance).AvoidVisit()) return;
			instance.Visit(CefString.Read(@string));
		}

		[UnmanagedFunctionPointer(CallingConvention.Winapi)]
		private delegate void VisitDelegate(cef_string_visitor_t* self, cef_string_t* @string);
	}
}