// --------------------------------------------------------------------------------------------
// Copyright (c) 2019 The CefNet Authors. All rights reserved.
// Licensed under the MIT license.
// See the licence file in the project root for full license information.
// --------------------------------------------------------------------------------------------
// Generated by CefGen
// Source: Generated/Native/Types/cef_touch_event_t.cs
// --------------------------------------------------------------------------------------------﻿
// DO NOT MODIFY! THIS IS AUTOGENERATED FILE!
// --------------------------------------------------------------------------------------------

#pragma warning disable 0169, 1591, 1573

using CefNet.CApi;

namespace CefNet
{
	/// <summary>
	///  Structure representing touch event information.
	/// </summary>
	/// <remarks>
	///  Role: Proxy
	/// </remarks>
	public struct CefTouchEvent
	{
		private cef_touch_event_t _instance;

		/// <summary>
		///  Id of a touch point. Must be unique per touch, can be any number except -1.
		///  Note that a maximum of 16 concurrent touches will be tracked; touches
		///  beyond that will be ignored.
		/// </summary>
		public int Id
		{
			get => _instance.id;
			set => _instance.id = value;
		}

		/// <summary>
		///  X coordinate relative to the left side of the view.
		/// </summary>
		public float X
		{
			get => _instance.x;
			set => _instance.x = value;
		}

		/// <summary>
		///  Y coordinate relative to the top side of the view.
		/// </summary>
		public float Y
		{
			get => _instance.y;
			set => _instance.y = value;
		}

		/// <summary>
		///  X radius in pixels. Set to 0 if not applicable.
		/// </summary>
		public float RadiusX
		{
			get => _instance.radius_x;
			set => _instance.radius_x = value;
		}

		/// <summary>
		///  Y radius in pixels. Set to 0 if not applicable.
		/// </summary>
		public float RadiusY
		{
			get => _instance.radius_y;
			set => _instance.radius_y = value;
		}

		/// <summary>
		///  Rotation angle in radians. Set to 0 if not applicable.
		/// </summary>
		public float RotationAngle
		{
			get => _instance.rotation_angle;
			set => _instance.rotation_angle = value;
		}

		/// <summary>
		///  The normalized pressure of the pointer input in the range of [0,1].
		///  Set to 0 if not applicable.
		/// </summary>
		public float Pressure
		{
			get => _instance.pressure;
			set => _instance.pressure = value;
		}

		/// <summary>
		///  The state of the touch point. Touches begin with one CEF_TET_PRESSED event
		///  followed by zero or more CEF_TET_MOVED events and finally one
		///  CEF_TET_RELEASED or CEF_TET_CANCELLED event. Events not respecting this
		///  order will be ignored.
		/// </summary>
		public CefTouchEventType Type
		{
			get => _instance.type;
			set => _instance.type = value;
		}

		/// <summary>
		///  Bit flags describing any pressed modifier keys. See
		///  cef_event_flags_t for values.
		/// </summary>
		public uint Modifiers
		{
			get => _instance.modifiers;
			set => _instance.modifiers = value;
		}

		/// <summary>
		///  The device type that caused the event.
		/// </summary>
		public CefPointerType PointerType
		{
			get => _instance.pointer_type;
			set => _instance.pointer_type = value;
		}

		public static implicit operator CefTouchEvent(cef_touch_event_t instance)
		{
			return new CefTouchEvent {_instance = instance};
		}

		public static implicit operator cef_touch_event_t(CefTouchEvent instance)
		{
			return instance._instance;
		}
	}
}