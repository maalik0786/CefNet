// --------------------------------------------------------------------------------------------
// Copyright (c) 2019 The CefNet Authors. All rights reserved.
// Licensed under the MIT license.
// See the licence file in the project root for full license information.
// --------------------------------------------------------------------------------------------
// Generated by CefGen
// Source: Generated/Native/Types/cef_browser_settings_t.cs
// --------------------------------------------------------------------------------------------﻿
// DO NOT MODIFY! THIS IS AUTOGENERATED FILE!
// --------------------------------------------------------------------------------------------

#pragma warning disable 0169, 1591, 1573

using System;
using System.Runtime.InteropServices;
using CefNet.CApi;

namespace CefNet
{
	/// <summary>
	///  Browser initialization settings. Specify NULL or 0 to get the recommended
	///  default values. The consequences of using custom values may not be well
	///  tested. Many of these and other settings can also configured using command-
	///  line switches.
	/// </summary>
	/// <remarks>
	///  Role: Proxy
	/// </remarks>
	public unsafe class CefBrowserSettings : IDisposable
	{
		private readonly bool _disposable;

		public CefBrowserSettings()
		{
			_disposable = true;
			NativeInstance = (cef_browser_settings_t*) CefStructure.Allocate(sizeof(cef_browser_settings_t));
			NativeInstance->size = new UIntPtr((uint) sizeof(cef_browser_settings_t));
		}

		public CefBrowserSettings(cef_browser_settings_t* instance)
		{
			NativeInstance = instance;
		}

		public cef_browser_settings_t* NativeInstance { get; private set; }

		/// <summary>
		///  Size of this structure.
		/// </summary>
		public long Size
		{
			get => (long) NativeInstance->size;
			set => NativeInstance->size = new UIntPtr((ulong) value);
		}

		/// <summary>
		///  The maximum rate in frames per second (fps) that CefRenderHandler::OnPaint
		///  will be called for a windowless browser. The actual fps may be lower if
		///  the browser cannot generate frames at the requested rate. The minimum
		///  value is 1 and the maximum value is 60 (default 30). This value can also be
		///  changed dynamically via CefBrowserHost::SetWindowlessFrameRate.
		/// </summary>
		public int WindowlessFrameRate
		{
			get => NativeInstance->windowless_frame_rate;
			set => NativeInstance->windowless_frame_rate = value;
		}

		/// <summary>
		///  Font settings.
		/// </summary>
		public string StandardFontFamily
		{
			get => CefString.Read(&NativeInstance->standard_font_family);
			set => CefString.Replace(&NativeInstance->standard_font_family, value);
		}

		public string FixedFontFamily
		{
			get => CefString.Read(&NativeInstance->fixed_font_family);
			set => CefString.Replace(&NativeInstance->fixed_font_family, value);
		}

		public string SerifFontFamily
		{
			get => CefString.Read(&NativeInstance->serif_font_family);
			set => CefString.Replace(&NativeInstance->serif_font_family, value);
		}

		public string SansSerifFontFamily
		{
			get => CefString.Read(&NativeInstance->sans_serif_font_family);
			set => CefString.Replace(&NativeInstance->sans_serif_font_family, value);
		}

		public string CursiveFontFamily
		{
			get => CefString.Read(&NativeInstance->cursive_font_family);
			set => CefString.Replace(&NativeInstance->cursive_font_family, value);
		}

		public string FantasyFontFamily
		{
			get => CefString.Read(&NativeInstance->fantasy_font_family);
			set => CefString.Replace(&NativeInstance->fantasy_font_family, value);
		}

		public int DefaultFontSize
		{
			get => NativeInstance->default_font_size;
			set => NativeInstance->default_font_size = value;
		}

		public int DefaultFixedFontSize
		{
			get => NativeInstance->default_fixed_font_size;
			set => NativeInstance->default_fixed_font_size = value;
		}

		public int MinimumFontSize
		{
			get => NativeInstance->minimum_font_size;
			set => NativeInstance->minimum_font_size = value;
		}

		public int MinimumLogicalFontSize
		{
			get => NativeInstance->minimum_logical_font_size;
			set => NativeInstance->minimum_logical_font_size = value;
		}

		/// <summary>
		///  Default encoding for Web content. If empty &quot;ISO-8859-1&quot; will be used. Also
		///  configurable using the &quot;default-encoding&quot; command-line switch.
		/// </summary>
		public string DefaultEncoding
		{
			get => CefString.Read(&NativeInstance->default_encoding);
			set => CefString.Replace(&NativeInstance->default_encoding, value);
		}

		/// <summary>
		///  Controls the loading of fonts from remote sources. Also configurable using
		///  the &quot;disable-remote-fonts&quot; command-line switch.
		/// </summary>
		public CefState RemoteFonts
		{
			get => NativeInstance->remote_fonts;
			set => NativeInstance->remote_fonts = value;
		}

		/// <summary>
		///  Controls whether JavaScript can be executed. Also configurable using the
		///  &quot;disable-javascript&quot; command-line switch.
		/// </summary>
		public CefState Javascript
		{
			get => NativeInstance->javascript;
			set => NativeInstance->javascript = value;
		}

		/// <summary>
		///  Controls whether JavaScript can be used to close windows that were not
		///  opened via JavaScript. JavaScript can still be used to close windows that
		///  were opened via JavaScript or that have no back/forward history. Also
		///  configurable using the &quot;disable-javascript-close-windows&quot; command-line
		///  switch.
		/// </summary>
		public CefState JavascriptCloseWindows
		{
			get => NativeInstance->javascript_close_windows;
			set => NativeInstance->javascript_close_windows = value;
		}

		/// <summary>
		///  Controls whether JavaScript can access the clipboard. Also configurable
		///  using the &quot;disable-javascript-access-clipboard&quot; command-line switch.
		/// </summary>
		public CefState JavascriptAccessClipboard
		{
			get => NativeInstance->javascript_access_clipboard;
			set => NativeInstance->javascript_access_clipboard = value;
		}

		/// <summary>
		///  Controls whether DOM pasting is supported in the editor via
		///  execCommand(&quot;paste&quot;). The |javascript_access_clipboard| setting must also
		///  be enabled. Also configurable using the &quot;disable-javascript-dom-paste&quot;
		///  command-line switch.
		/// </summary>
		public CefState JavascriptDOMPaste
		{
			get => NativeInstance->javascript_dom_paste;
			set => NativeInstance->javascript_dom_paste = value;
		}

		/// <summary>
		///  Controls whether any plugins will be loaded. Also configurable using the
		///  &quot;disable-plugins&quot; command-line switch.
		/// </summary>
		public CefState Plugins
		{
			get => NativeInstance->plugins;
			set => NativeInstance->plugins = value;
		}

		/// <summary>
		///  Controls whether file URLs will have access to all URLs. Also configurable
		///  using the &quot;allow-universal-access-from-files&quot; command-line switch.
		/// </summary>
		public CefState UniversalAccessFromFileUrls
		{
			get => NativeInstance->universal_access_from_file_urls;
			set => NativeInstance->universal_access_from_file_urls = value;
		}

		/// <summary>
		///  Controls whether file URLs will have access to other file URLs. Also
		///  configurable using the &quot;allow-access-from-files&quot; command-line switch.
		/// </summary>
		public CefState FileAccessFromFileUrls
		{
			get => NativeInstance->file_access_from_file_urls;
			set => NativeInstance->file_access_from_file_urls = value;
		}

		/// <summary>
		///  Controls whether web security restrictions (same-origin policy) will be
		///  enforced. Disabling this setting is not recommend as it will allow risky
		///  security behavior such as cross-site scripting (XSS). Also configurable
		///  using the &quot;disable-web-security&quot; command-line switch.
		/// </summary>
		public CefState WebSecurity
		{
			get => NativeInstance->web_security;
			set => NativeInstance->web_security = value;
		}

		/// <summary>
		///  Controls whether image URLs will be loaded from the network. A cached image
		///  will still be rendered if requested. Also configurable using the
		///  &quot;disable-image-loading&quot; command-line switch.
		/// </summary>
		public CefState ImageLoading
		{
			get => NativeInstance->image_loading;
			set => NativeInstance->image_loading = value;
		}

		/// <summary>
		///  Controls whether standalone images will be shrunk to fit the page. Also
		///  configurable using the &quot;image-shrink-standalone-to-fit&quot; command-line
		///  switch.
		/// </summary>
		public CefState ImageShrinkStandaloneToFit
		{
			get => NativeInstance->image_shrink_standalone_to_fit;
			set => NativeInstance->image_shrink_standalone_to_fit = value;
		}

		/// <summary>
		///  Controls whether text areas can be resized. Also configurable using the
		///  &quot;disable-text-area-resize&quot; command-line switch.
		/// </summary>
		public CefState TextAreaResize
		{
			get => NativeInstance->text_area_resize;
			set => NativeInstance->text_area_resize = value;
		}

		/// <summary>
		///  Controls whether the tab key can advance focus to links. Also configurable
		///  using the &quot;disable-tab-to-links&quot; command-line switch.
		/// </summary>
		public CefState TabToLinks
		{
			get => NativeInstance->tab_to_links;
			set => NativeInstance->tab_to_links = value;
		}

		/// <summary>
		///  Controls whether local storage can be used. Also configurable using the
		///  &quot;disable-local-storage&quot; command-line switch.
		/// </summary>
		public CefState LocalStorage
		{
			get => NativeInstance->local_storage;
			set => NativeInstance->local_storage = value;
		}

		/// <summary>
		///  Controls whether databases can be used. Also configurable using the
		///  &quot;disable-databases&quot; command-line switch.
		/// </summary>
		public CefState Databases
		{
			get => NativeInstance->databases;
			set => NativeInstance->databases = value;
		}

		/// <summary>
		///  Controls whether the application cache can be used. Also configurable using
		///  the &quot;disable-application-cache&quot; command-line switch.
		/// </summary>
		public CefState ApplicationCache
		{
			get => NativeInstance->application_cache;
			set => NativeInstance->application_cache = value;
		}

		/// <summary>
		///  Controls whether WebGL can be used. Note that WebGL requires hardware
		///  support and may not work on all systems even when enabled. Also
		///  configurable using the &quot;disable-webgl&quot; command-line switch.
		/// </summary>
		public CefState Webgl
		{
			get => NativeInstance->webgl;
			set => NativeInstance->webgl = value;
		}

		/// <summary>
		///  Background color used for the browser before a document is loaded and when
		///  no document color is specified. The alpha component must be either fully
		///  opaque (0xFF) or fully transparent (0x00). If the alpha component is fully
		///  opaque then the RGB components will be used as the background color. If the
		///  alpha component is fully transparent for a windowed browser then the
		///  CefSettings.background_color value will be used. If the alpha component is
		///  fully transparent for a windowless (off-screen) browser then transparent
		///  painting will be enabled.
		/// </summary>
		public CefColor BackgroundColor
		{
			get => NativeInstance->background_color;
			set => NativeInstance->background_color = value;
		}

		/// <summary>
		///  Comma delimited ordered list of language codes without any whitespace that
		///  will be used in the &quot;Accept-Language&quot; HTTP header. May be set globally
		///  using the CefBrowserSettings.accept_language_list value. If both values are
		///  empty then &quot;en-US,en&quot; will be used.
		/// </summary>
		public string AcceptLanguageList
		{
			get => CefString.Read(&NativeInstance->accept_language_list);
			set => CefString.Replace(&NativeInstance->accept_language_list, value);
		}

		public void Dispose()
		{
			Dispose(true);
			GC.SuppressFinalize(this);
		}

		internal static CefBrowserSettings Create(IntPtr instance)
		{
			return new CefBrowserSettings((cef_browser_settings_t*) instance);
		}

		public cef_browser_settings_t* GetNativeInstance()
		{
			return NativeInstance;
		}

		protected virtual void Dispose(bool disposing)
		{
			if (_disposable && NativeInstance != null)
			{
				StandardFontFamily = null;
				FixedFontFamily = null;
				SerifFontFamily = null;
				SansSerifFontFamily = null;
				CursiveFontFamily = null;
				FantasyFontFamily = null;
				DefaultEncoding = null;
				AcceptLanguageList = null;
				Marshal.FreeHGlobal((IntPtr) NativeInstance);
				NativeInstance = null;
			}
		}

		~CefBrowserSettings()
		{
			Dispose(false);
		}
	}
}