// --------------------------------------------------------------------------------------------
// Copyright (c) 2019 The CefNet Authors. All rights reserved.
// Licensed under the MIT license.
// See the licence file in the project root for full license information.
// --------------------------------------------------------------------------------------------
// Generated by CefGen
// Source: Generated/Native/Types/cef_sslstatus_t.cs
// --------------------------------------------------------------------------------------------﻿
// DO NOT MODIFY! THIS IS AUTOGENERATED FILE!
// --------------------------------------------------------------------------------------------

#pragma warning disable 0169, 1591, 1573

using System;
using CefNet.CApi;

namespace CefNet
{
	/// <summary>
	///  Structure representing the SSL information for a navigation entry.
	/// </summary>
	/// <remarks>
	///  Role: Proxy
	/// </remarks>
	public unsafe class CefSSLStatus : CefBaseRefCounted<cef_sslstatus_t>
	{
		public CefSSLStatus(cef_sslstatus_t* instance)
			: base((cef_base_ref_counted_t*) instance)
		{
		}

		/// <summary>
		///  Gets a value indicating whether the status is related to a secure SSL/TLS connection.
		/// </summary>
		public virtual bool IsSecureConnection => SafeCall(NativeInstance->IsSecureConnection() != 0);

		/// <summary>
		///  Gets a bitmask containing any and all problems verifying the server
		///  certificate.
		/// </summary>
		public virtual CefCertStatus CertStatus => SafeCall(NativeInstance->GetCertStatus());

		/// <summary>
		///  Gets the SSL version used for the SSL connection.
		/// </summary>
		public virtual CefSSLVersion Sslversion => SafeCall(NativeInstance->GetSslversion());

		/// <summary>
		///  Gets a bitmask containing the page security content status.
		/// </summary>
		public virtual CefSSLContentStatus ContentStatus => SafeCall(NativeInstance->GetContentStatus());

		/// <summary>
		///  Gets the X.509 certificate.
		/// </summary>
		public virtual CefX509Certificate X509certificate =>
			SafeCall(CefX509Certificate.Wrap(CefX509Certificate.Create, NativeInstance->GetX509certificate()));

		internal static CefSSLStatus Create(IntPtr instance)
		{
			return new CefSSLStatus((cef_sslstatus_t*) instance);
		}
	}
}