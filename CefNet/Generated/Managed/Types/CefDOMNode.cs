// --------------------------------------------------------------------------------------------
// Copyright (c) 2019 The CefNet Authors. All rights reserved.
// Licensed under the MIT license.
// See the licence file in the project root for full license information.
// --------------------------------------------------------------------------------------------
// Generated by CefGen
// Source: Generated/Native/Types/cef_domnode_t.cs
// --------------------------------------------------------------------------------------------﻿
// DO NOT MODIFY! THIS IS AUTOGENERATED FILE!
// --------------------------------------------------------------------------------------------

#pragma warning disable 0169, 1591, 1573

using System;
using CefNet.CApi;

namespace CefNet
{
	/// <summary>
	///  Structure used to represent a DOM node. The functions of this structure
	///  should only be called on the render process main thread.
	/// </summary>
	/// <remarks>
	///  Role: Proxy
	/// </remarks>
	public unsafe partial class CefDOMNode : CefBaseRefCounted<cef_domnode_t>
	{
		public CefDOMNode(cef_domnode_t* instance)
			: base((cef_base_ref_counted_t*) instance)
		{
		}

		/// <summary>
		///  Gets the type for this node.
		/// </summary>
		public virtual CefDOMNodeType Type => SafeCall(NativeInstance->GetCefType());

		/// <summary>
		///  Gets a value indicating whether this is a text node.
		/// </summary>
		public virtual bool IsText => SafeCall(NativeInstance->IsText() != 0);

		/// <summary>
		///  Gets a value indicating whether this is an element node.
		/// </summary>
		public virtual bool IsElement => SafeCall(NativeInstance->IsElement() != 0);

		/// <summary>
		///  Gets a value indicating whether this is an editable node.
		/// </summary>
		public virtual bool IsEditable => SafeCall(NativeInstance->IsEditable() != 0);

		/// <summary>
		///  Gets a value indicating whether this is a form control element node.
		/// </summary>
		public virtual bool IsFormControlElement => SafeCall(NativeInstance->IsFormControlElement() != 0);

		/// <summary>
		///  Gets the type of this form control element node.
		///  The resulting string must be freed by calling cef_string_userfree_free().
		/// </summary>
		public virtual string FormControlElementType =>
			SafeCall(CefString.ReadAndFree(NativeInstance->GetFormControlElementType()));

		/// <summary>
		///  Gets the name of this node.
		///  The resulting string must be freed by calling cef_string_userfree_free().
		/// </summary>
		public virtual string Name => SafeCall(CefString.ReadAndFree(NativeInstance->GetName()));

		/// <summary>
		///  Gets the contents of this node as markup.
		///  The resulting string must be freed by calling cef_string_userfree_free().
		/// </summary>
		public virtual string AsMarkup => SafeCall(CefString.ReadAndFree(NativeInstance->GetAsMarkup()));

		/// <summary>
		///  Gets the document associated with this node.
		/// </summary>
		public virtual CefDOMDocument Document =>
			SafeCall(CefDOMDocument.Wrap(CefDOMDocument.Create, NativeInstance->GetDocument()));

		/// <summary>
		///  Gets the parent node.
		/// </summary>
		public virtual CefDOMNode Parent => SafeCall(Wrap(Create, NativeInstance->GetParent()));

		/// <summary>
		///  Gets the previous sibling node.
		/// </summary>
		public virtual CefDOMNode PreviousSibling => SafeCall(Wrap(Create, NativeInstance->GetPreviousSibling()));

		/// <summary>
		///  Gets the next sibling node.
		/// </summary>
		public virtual CefDOMNode NextSibling => SafeCall(Wrap(Create, NativeInstance->GetNextSibling()));

		/// <summary>
		///  Gets a value indicating whether this node has child nodes.
		/// </summary>
		public virtual bool HasChildren => SafeCall(NativeInstance->HasChildren() != 0);

		/// <summary>
		///  Return the first child node.
		/// </summary>
		public virtual CefDOMNode FirstChild => SafeCall(Wrap(Create, NativeInstance->GetFirstChild()));

		/// <summary>
		///  Gets the last child node.
		/// </summary>
		public virtual CefDOMNode LastChild => SafeCall(Wrap(Create, NativeInstance->GetLastChild()));

		/// <summary>
		///  Gets the tag name of this element.
		///  The resulting string must be freed by calling cef_string_userfree_free().
		/// </summary>
		public virtual string ElementTagName => SafeCall(CefString.ReadAndFree(NativeInstance->GetElementTagName()));

		/// <summary>
		///  Gets a value indicating whether this element has attributes.
		/// </summary>
		public virtual bool HasElementAttributes => SafeCall(NativeInstance->HasElementAttributes() != 0);

		/// <summary>
		///  Gets the inner text of the element.
		///  The resulting string must be freed by calling cef_string_userfree_free().
		/// </summary>
		public virtual string ElementInnerText =>
			SafeCall(CefString.ReadAndFree(NativeInstance->GetElementInnerText()));

		/// <summary>
		///  Gets the bounds of the element.
		/// </summary>
		public virtual CefRect ElementBounds => SafeCall(NativeInstance->GetElementBounds());

		internal static CefDOMNode Create(IntPtr instance)
		{
			return new CefDOMNode((cef_domnode_t*) instance);
		}

		/// <summary>
		///  Returns true (1) if this object is pointing to the same handle as |that|
		///  object.
		/// </summary>
		public virtual bool IsSame(CefDOMNode that)
		{
			return SafeCall(NativeInstance->IsSame(that != null ? that.GetNativeInstance() : null) != 0);
		}

		/// <summary>
		///  Set the value of this node. Returns true (1) on success.
		/// </summary>
		public virtual bool SetValue(string value)
		{
			fixed (char* s0 = value)
			{
				var cstr0 = new cef_string_t {Str = s0, Length = value != null ? value.Length : 0};
				return SafeCall(NativeInstance->SetValue(&cstr0) != 0);
			}
		}

		/// <summary>
		///  Returns true (1) if this element has an attribute named |attrName|.
		/// </summary>
		public virtual bool HasElementAttribute(string attrName)
		{
			fixed (char* s0 = attrName)
			{
				var cstr0 = new cef_string_t {Str = s0, Length = attrName != null ? attrName.Length : 0};
				return SafeCall(NativeInstance->HasElementAttribute(&cstr0) != 0);
			}
		}

		/// <summary>
		///  Returns the element attribute named |attrName|.
		///  The resulting string must be freed by calling cef_string_userfree_free().
		/// </summary>
		public virtual string GetElementAttribute(string attrName)
		{
			fixed (char* s0 = attrName)
			{
				var cstr0 = new cef_string_t {Str = s0, Length = attrName != null ? attrName.Length : 0};
				return SafeCall(CefString.ReadAndFree(NativeInstance->GetElementAttribute(&cstr0)));
			}
		}

		/// <summary>
		///  Returns a map of all element attributes.
		/// </summary>
		public virtual void GetElementAttributes(CefStringMap attrMap)
		{
			NativeInstance->GetElementAttributes(attrMap);
			GC.KeepAlive(this);
		}

		/// <summary>
		///  Set the value for the element attribute named |attrName|. Returns true (1)
		///  on success.
		/// </summary>
		public virtual bool SetElementAttribute(string attrName, string value)
		{
			fixed (char* s0 = attrName)
			fixed (char* s1 = value)
			{
				var cstr0 = new cef_string_t {Str = s0, Length = attrName != null ? attrName.Length : 0};
				var cstr1 = new cef_string_t {Str = s1, Length = value != null ? value.Length : 0};
				return SafeCall(NativeInstance->SetElementAttribute(&cstr0, &cstr1) != 0);
			}
		}

		/// <summary>
		///  Returns the value of this node.
		///  The resulting string must be freed by calling cef_string_userfree_free().
		/// </summary>
		public virtual string GetValue()
		{
			return SafeCall(CefString.ReadAndFree(NativeInstance->GetValue()));
		}
	}
}