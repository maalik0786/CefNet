// --------------------------------------------------------------------------------------------
// Copyright (c) 2019 The CefNet Authors. All rights reserved.
// Licensed under the MIT license.
// See the licence file in the project root for full license information.
// --------------------------------------------------------------------------------------------
// Generated by CefGen
// Source: Generated/Native/Types/cef_v8stack_frame_t.cs
// --------------------------------------------------------------------------------------------﻿
// DO NOT MODIFY! THIS IS AUTOGENERATED FILE!
// --------------------------------------------------------------------------------------------

#pragma warning disable 0169, 1591, 1573

using System;
using CefNet.CApi;

namespace CefNet
{
	/// <summary>
	///  Structure representing a V8 stack frame handle. V8 handles can only be
	///  accessed from the thread on which they are created. Valid threads for
	///  creating a V8 handle include the render process main thread (TID_RENDERER)
	///  and WebWorker threads. A task runner for posting tasks on the associated
	///  thread can be retrieved via the cef_v8context_t::get_task_runner() function.
	/// </summary>
	/// <remarks>
	///  Role: Proxy
	/// </remarks>
	public unsafe class CefV8StackFrame : CefBaseRefCounted<cef_v8stack_frame_t>
	{
		public CefV8StackFrame(cef_v8stack_frame_t* instance)
			: base((cef_base_ref_counted_t*) instance)
		{
		}

		/// <summary>
		///  Gets a value indicating whether the underlying handle is valid and it can be accessed
		///  on the current thread. Do not call any other functions if this property
		///  returns false.
		/// </summary>
		public virtual bool IsValid => SafeCall(NativeInstance->IsValid() != 0);

		/// <summary>
		///  Gets the name of the resource script that contains the function.
		///  The resulting string must be freed by calling cef_string_userfree_free().
		/// </summary>
		public virtual string ScriptName => SafeCall(CefString.ReadAndFree(NativeInstance->GetScriptName()));

		/// <summary>
		///  Gets the name of the resource script that contains the function or the
		///  sourceURL value if the script name is undefined and its source ends with a
		///  &quot;//
		///  @
		///  sourceURL=...&quot; string.
		///  The resulting string must be freed by calling cef_string_userfree_free().
		/// </summary>
		public virtual string ScriptNameOrSourceUrl =>
			SafeCall(CefString.ReadAndFree(NativeInstance->GetScriptNameOrSourceUrl()));

		/// <summary>
		///  Gets the name of the function.
		///  The resulting string must be freed by calling cef_string_userfree_free().
		/// </summary>
		public virtual string FunctionName => SafeCall(CefString.ReadAndFree(NativeInstance->GetFunctionName()));

		/// <summary>
		///  Gets the 1-based line number for the function call or 0 if unknown.
		/// </summary>
		public virtual int LineNumber => SafeCall(NativeInstance->GetLineNumber());

		/// <summary>
		///  Gets the 1-based column offset on the line for the function call or 0 if
		///  unknown.
		/// </summary>
		public virtual int Column => SafeCall(NativeInstance->GetColumn());

		/// <summary>
		///  Gets a value indicating whether the function was compiled using eval().
		/// </summary>
		public virtual bool IsEval => SafeCall(NativeInstance->IsEval() != 0);

		/// <summary>
		///  Gets a value indicating whether the function was called as a constructor via &quot;new&quot;.
		/// </summary>
		public virtual bool IsConstructor => SafeCall(NativeInstance->IsConstructor() != 0);

		internal static CefV8StackFrame Create(IntPtr instance)
		{
			return new CefV8StackFrame((cef_v8stack_frame_t*) instance);
		}
	}
}