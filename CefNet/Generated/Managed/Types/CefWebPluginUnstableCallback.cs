// --------------------------------------------------------------------------------------------
// Copyright (c) 2019 The CefNet Authors. All rights reserved.
// Licensed under the MIT license.
// See the licence file in the project root for full license information.
// --------------------------------------------------------------------------------------------
// Generated by CefGen
// Source: Generated/Native/Types/cef_web_plugin_unstable_callback_t.cs
// --------------------------------------------------------------------------------------------﻿
// DO NOT MODIFY! THIS IS AUTOGENERATED FILE!
// --------------------------------------------------------------------------------------------

#pragma warning disable 0169, 1591, 1573

using System;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;
using CefNet.CApi;
using CefNet.Internal;

namespace CefNet
{
	/// <summary>
	///  Structure to implement for receiving unstable plugin information. The
	///  functions of this structure will be called on the browser process IO thread.
	/// </summary>
	/// <remarks>
	///  Role: Handler
	/// </remarks>
	public unsafe class CefWebPluginUnstableCallback : CefBaseRefCounted<cef_web_plugin_unstable_callback_t>,
		ICefWebPluginUnstableCallbackPrivate
	{
		private static readonly IsUnstableDelegate fnIsUnstable = IsUnstableImpl;

		public CefWebPluginUnstableCallback()
		{
			var self = NativeInstance;
			self->is_unstable = (void*) Marshal.GetFunctionPointerForDelegate(fnIsUnstable);
		}

		public CefWebPluginUnstableCallback(cef_web_plugin_unstable_callback_t* instance)
			: base((cef_base_ref_counted_t*) instance)
		{
		}

		[MethodImpl(MethodImplOptions.ForwardRef)]
		extern bool ICefWebPluginUnstableCallbackPrivate.AvoidIsUnstable();

		internal static CefWebPluginUnstableCallback Create(IntPtr instance)
		{
			return new CefWebPluginUnstableCallback((cef_web_plugin_unstable_callback_t*) instance);
		}

		/// <summary>
		///  Method that will be called for the requested plugin. |unstable| will be
		///  true (1) if the plugin has reached the crash count threshold of 3 times in
		///  120 seconds.
		/// </summary>
		protected internal virtual void IsUnstable(string path, bool unstable)
		{
		}

		// void (*)(_cef_web_plugin_unstable_callback_t* self, const cef_string_t* path, int unstable)*
		private static void IsUnstableImpl(cef_web_plugin_unstable_callback_t* self, cef_string_t* path, int unstable)
		{
			var instance = GetInstance((IntPtr) self) as CefWebPluginUnstableCallback;
			if (instance == null || ((ICefWebPluginUnstableCallbackPrivate) instance).AvoidIsUnstable()) return;
			instance.IsUnstable(CefString.Read(path), unstable != 0);
		}

		[UnmanagedFunctionPointer(CallingConvention.Winapi)]
		private delegate void IsUnstableDelegate(cef_web_plugin_unstable_callback_t* self, cef_string_t* path,
			int unstable);
	}
}