// --------------------------------------------------------------------------------------------
// Copyright (c) 2019 The CefNet Authors. All rights reserved.
// Licensed under the MIT license.
// See the licence file in the project root for full license information.
// --------------------------------------------------------------------------------------------
// Generated by CefGen
// Source: Generated/Native/Types/cef_process_message_t.cs
// --------------------------------------------------------------------------------------------﻿
// DO NOT MODIFY! THIS IS AUTOGENERATED FILE!
// --------------------------------------------------------------------------------------------

#pragma warning disable 0169, 1591, 1573

using System;
using CefNet.CApi;

namespace CefNet
{
	/// <summary>
	///  Structure representing a message. Can be used on any process and thread.
	/// </summary>
	/// <remarks>
	///  Role: Proxy
	/// </remarks>
	public unsafe partial class CefProcessMessage : CefBaseRefCounted<cef_process_message_t>
	{
		public CefProcessMessage(cef_process_message_t* instance)
			: base((cef_base_ref_counted_t*) instance)
		{
		}

		/// <summary>
		///  Gets a value indicating whether this object is valid. Do not call any other functions
		///  if this property returns false.
		/// </summary>
		public virtual bool IsValid => SafeCall(NativeInstance->IsValid() != 0);

		/// <summary>
		///  Gets a value indicating whether the values of this object are read-only. Some APIs may
		///  expose read-only objects.
		/// </summary>
		public virtual bool IsReadOnly => SafeCall(NativeInstance->IsReadOnly() != 0);

		/// <summary>
		///  Gets the message name.
		///  The resulting string must be freed by calling cef_string_userfree_free().
		/// </summary>
		public virtual string Name => SafeCall(CefString.ReadAndFree(NativeInstance->GetName()));

		/// <summary>
		///  Gets the list of arguments.
		/// </summary>
		public virtual CefListValue ArgumentList =>
			SafeCall(CefListValue.Wrap(CefListValue.Create, NativeInstance->GetArgumentList()));

		internal static CefProcessMessage Create(IntPtr instance)
		{
			return new CefProcessMessage((cef_process_message_t*) instance);
		}

		/// <summary>
		///  Returns a writable copy of this object.
		/// </summary>
		public virtual CefProcessMessage Copy()
		{
			return SafeCall(Wrap(Create, NativeInstance->Copy()));
		}
	}
}