// --------------------------------------------------------------------------------------------
// Copyright (c) 2019 The CefNet Authors. All rights reserved.
// Licensed under the MIT license.
// See the licence file in the project root for full license information.
// --------------------------------------------------------------------------------------------
// Generated by CefGen
// Source: Generated/Native/Types/cef_load_handler_t.cs
// --------------------------------------------------------------------------------------------﻿
// DO NOT MODIFY! THIS IS AUTOGENERATED FILE!
// --------------------------------------------------------------------------------------------

#pragma warning disable 0169, 1591, 1573

namespace CefNet.Internal
{
	internal sealed class CefLoadHandlerGlue : CefLoadHandler, ICefLoadHandlerPrivate
	{
		private readonly WebViewGlue _implementation;

		public CefLoadHandlerGlue(WebViewGlue impl)
		{
			_implementation = impl;
		}

		bool ICefLoadHandlerPrivate.AvoidOnLoadingStateChange()
		{
			return _implementation.AvoidOnLoadingStateChange();
		}

		bool ICefLoadHandlerPrivate.AvoidOnLoadStart()
		{
			return _implementation.AvoidOnLoadStart();
		}

		bool ICefLoadHandlerPrivate.AvoidOnLoadEnd()
		{
			return _implementation.AvoidOnLoadEnd();
		}

		bool ICefLoadHandlerPrivate.AvoidOnLoadError()
		{
			return _implementation.AvoidOnLoadError();
		}

		protected internal override void OnLoadingStateChange(CefBrowser browser, bool isLoading, bool canGoBack,
			bool canGoForward)
		{
			_implementation.OnLoadingStateChange(browser, isLoading, canGoBack, canGoForward);
		}

		protected internal override void OnLoadStart(CefBrowser browser, CefFrame frame,
			CefTransitionType transitionType)
		{
			_implementation.OnLoadStart(browser, frame, transitionType);
		}

		protected internal override void OnLoadEnd(CefBrowser browser, CefFrame frame, int httpStatusCode)
		{
			_implementation.OnLoadEnd(browser, frame, httpStatusCode);
		}

		protected internal override void OnLoadError(CefBrowser browser, CefFrame frame, CefErrorCode errorCode,
			string errorText, string failedUrl)
		{
			_implementation.OnLoadError(browser, frame, errorCode, errorText, failedUrl);
		}
	}
}